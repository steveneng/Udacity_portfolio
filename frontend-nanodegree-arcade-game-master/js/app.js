// Enemies our player must avoid
var Enemy = function(x, y, z) {
    // Variables applied to each of our instances go here,
    // we've provided one for you to get started

    // The image/sprite for our enemies, this uses
    // a helper we've provided to easily load images

    this.sprite = 'images/enemy-bug.png';
    this.x = x;
    this.y = y;
    this.speed = z;
};

// Update the enemy's position, required method for game
// Parameter: dt, a time delta between ticks
Enemy.prototype.update = function(dt) {
    this.x = this.x + this.speed * dt;
    if (this.x > 400) { // after 400 the bugs will reset back to origin
        this.x = 0; //prevents bugs going out of screen
        var generator = Math.random(); //speed is generated by this function
        if (generator < 0.33) {
            this.speed = 200;
        } else if (generator < .66) {
            this.speed = 300;
        } else if (generator < .90) {
            this.speed = 500;
        } else {
            this.speed = 1000  // since the probability is low, the spawn rate for a super bug is low
        }
    }
};

// Draw the enemy on the screen, required method for game
Enemy.prototype.render = function() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

var Player = function(x, y) {

    this.sprite = 'images/char-boy.png';
    this.x = x;
    this.y = y;
    this.speed = 100;
};

Player.prototype.update = function(dt) {
    if (this.x < 0 || this.x > 400) {
        if (this.x < 0) {
            this.x = 0; // if it goes out of range, it will be forced back to 0
        } else {
            this.x = 400;
        }
    }
    if (this.y < 60 || this.y > 400) {
        if (this.y < 60) {
            this.reset(); //win
            alert("you won!");
        } else if (this.y > 400) {
            this.y = 400;
        }
    }
    if (this.collide()) {
        this.reset();
    }
};
// Now write your own player class
// This class requires an update(), render() and
// a handleInput() method.

Player.prototype.reset = function() {
    this.x = 200;
    this.y = 300;
};

Player.prototype.render = function() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};


Player.prototype.handleInput = function(key) {
    if (key === 'left') {
        this.x -= 100;
    } else if (key === 'right') {
        this.x += 100;
    } else if (key === 'up') {
        this.y -= 80;
    } else if (key === 'down') {
        this.y += 80;
    }
}

Player.prototype.collide = function() {
    for (var i = 0; i < allEnemies.length; i++) {
        if (this.x < allEnemies[i].x + 50 && this.x > allEnemies[i].x - 50) {
            if (this.y < allEnemies[i].y + 30 && this.y> allEnemies[i].y-30) {
                this.reset();
                break;
            }
        }
    }
};
// Now instantiate your objects.
// Place all enemy objects in an array called allEnemies
// Place the player object in a variable called player

var player = new Player(200, 300);
var enemy1 = new Enemy(-100, 60, 300);
var enemy2 = new Enemy(-100, 130, 480);
var enemy3 = new Enemy(-100, 200, 400);
var allEnemies = [enemy1, enemy2, enemy3];

// This listens for key presses and sends the keys to your
// Player.handleInput() method. You don't need to modify this.
document.addEventListener('keyup', function(e) {
    var allowedKeys = {
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down'
    };

    player.handleInput(allowedKeys[e.keyCode]);
});
